class Track{
  constructor(loc, rot, walls, check){
    this.startLocation = loc;
    this.startRotation = rot;
    this.wallCoords = walls;
    this.checkCoords = check;
    //this.roads = road;
    
    this.walls = [];
    this.checkpoints = [];
    
    //this.endPoints = [e1,e2];

    
    this.setLines();
    
  }
  
  setLines(){
    ////////WALLS
    for(let i = 0; i< this.wallCoords.length; i+=4){
    this.walls.push(new WallLine(this.wallCoords[i], this.wallCoords[i+1], this.wallCoords[i+2], this.wallCoords[i+3]));  }
    
    ///////////CHECKPOINTS
    for(let i = 0; i < this.checkCoords.length; i+=4){
    this.checkpoints.push(new Checkpoint(createVector(this.checkCoords[i],this.checkCoords[i+1]), createVector(this.checkCoords[i+2],this.checkCoords[i+3])));
  }
    
  }
  
  //BOOL
  draw(checkpoints, buffer){
    
    if(buffer){
      buffer.background(99,47,38);
      buffer.push();
      buffer.noStroke();
      buffer.fill(181,163,110)
      for(let i = 0; i < this.walls.length; i+=2){
        buffer.quad(this.walls[i].point1.x,this.walls[i].point1.y,this.walls[i].point2.x,this.walls[i].point2.y, this.walls[i+1].point2.x,this.walls[i+1].point2.y,this.walls[i+1].point1.x,this.walls[i+1].point1.y)
      }
      buffer.pop();

      for(let i = 0; i < this.walls.length; i++){  this.walls[i].drawLine();  } 


      if(checkpoints){
      for(let i = 0; i < this.checkpoints.length; i++){  this.checkpoints[i].draw();  }      
      }            
    }else{
      background(99,47,38);
      push();
      noStroke();
      fill(181,163,110)
      for(let i = 0; i < this.walls.length; i+=2){
        quad(this.walls[i].point1.x,this.walls[i].point1.y,this.walls[i].point2.x,this.walls[i].point2.y, this.walls[i+1].point2.x,this.walls[i+1].point2.y,this.walls[i+1].point1.x,this.walls[i+1].point1.y)
      }
      pop();

      for(let i = 0; i < this.walls.length; i++){  this.walls[i].drawLine();  } 


      if(checkpoints){
      for(let i = 0; i < this.checkpoints.length; i++){  this.checkpoints[i].draw();  }      
      }      
    }
    
    
    
  } 
}


let track1LocX = 29;
let track1LocY = 98;
let track1Rot = 4.7;
let track1Walls = [
  42, 98, 49, 55, 16, 98, 20, 44, 49, 55, 58, 31, 20, 44, 37, 10, 58, 31, 68, 30, 37, 10, 87, 7, 68, 30, 72, 57, 87, 7, 99, 44, 72, 57, 69, 104, 99, 44, 98, 107, 69, 104, 69, 215, 98, 107, 98, 218, 69, 215, 69, 327, 98, 218, 98, 302, 69, 327, 103, 337, 98, 302, 112, 314, 103, 337, 152, 324, 112, 314, 125, 303, 152, 324, 150, 233, 125, 303, 122, 233, 150, 233, 147, 144, 122, 233, 119, 144, 147, 144, 147, 60, 119, 144, 119, 60, 147, 60, 150, 35, 119, 60, 133, 12, 150, 35, 174, 32, 133, 12, 191, 11, 174, 32, 177, 64, 191, 11, 208, 49, 177, 64, 174, 128, 208, 49, 200, 128, 174, 128, 168, 195, 200, 128, 190, 195, 168, 195, 169, 251, 190, 195, 207, 251, 169, 251, 184, 323, 207, 251, 215, 286, 184, 323, 238, 334, 215, 286, 238, 296, 238, 334, 297, 308, 238, 296, 266, 287, 297, 308, 313, 269, 266, 287, 281, 269, 313, 269, 301, 226, 281, 269, 274, 253, 301, 226, 265, 210, 274, 253, 246, 249, 265, 210, 245, 192, 246, 249, 212, 197, 245, 192, 263, 104, 212, 197, 222, 101, 263, 104, 264, 48, 222, 101, 233, 45, 264, 48, 283, 34, 233, 45, 254, 9, 283, 34, 289, 34, 254, 9, 316, 7, 289, 34, 293, 38, 316, 7, 330, 45, 293, 38, 289, 94, 330, 45, 314, 109, 289, 94, 299, 175, 314, 109, 332, 156, 299, 175, 336, 211, 332, 156, 353, 186, 336, 211, 366, 232, 353, 186, 395, 221, 366, 232, 365, 253, 395, 221, 392, 266, 365, 253, 348, 268, 392, 266, 367, 291, 348, 268, 313, 294, 367, 291, 342, 301, 313, 294, 299, 324, 342, 301, 328, 317, 299, 324, 317, 354, 328, 317, 364, 375, 317, 354, 290, 365, 364, 375, 299, 396, 290, 365, 232, 347, 299, 396, 232, 391, 232, 347, 127, 352, 232, 391, 127, 382, 127, 352, 55, 349, 127, 382, 38, 374, 55, 349, 40, 316, 38, 374, 5, 336, 40, 316, 38, 231, 5, 336, 9, 234, 38, 231, 37, 151, 9, 234, 8, 154, 37, 151, 42, 98, 8, 154, 16, 98 ];
let track1Check = [
49, 55, 20, 44, 58, 31, 37, 10, 68, 30, 87, 7, 72, 57, 99, 44, 69, 104, 98, 107, 69, 215, 98, 218, 69, 327, 98, 302, 103, 337, 112, 314, 152, 324, 125, 303, 150, 233, 122, 233, 147, 144, 119, 144, 147, 60, 119, 60, 150, 35, 133, 12, 174, 32, 191, 11, 177, 64, 208, 49, 174, 128, 200, 128, 168, 195, 190, 195, 169, 251, 207, 251, 184, 323, 215, 286, 238, 334, 238, 296, 297, 308, 266, 287, 313, 269, 281, 269, 301, 226, 274, 253, 265, 210, 246, 249, 245, 192, 212, 197, 263, 104, 222, 101, 264, 48, 233, 45, 283, 34, 254, 9, 289, 34, 316, 7, 293, 38, 330, 45, 289, 94, 314, 109, 299, 175, 332, 156, 336, 211, 353, 186, 366, 232, 395, 221, 365, 253, 392, 266, 348, 268, 367, 291, 313, 294, 342, 301, 299, 324, 328, 317, 317, 354, 364, 375, 290, 365, 299, 396, 232, 347, 232, 391, 127, 352, 127, 382, 55, 349, 38, 374, 40, 316, 5, 336, 38, 231, 9, 234, 37, 151, 8, 154, 42, 98, 16, 98 ];

let track2LocX = 119;
let track2LocY = 32;
let track2Rot = 6.19;
let track2Walls = [
119, 41, 202, 36, 118, 22, 202, 12, 202, 36, 279, 39, 202, 12, 288, 16, 279, 39, 341, 50, 288, 16, 358, 27, 341, 50, 360, 64, 358, 27, 385, 49, 360, 64, 368, 93, 385, 49, 396, 93, 368, 93, 361, 131, 396, 93, 388, 138, 361, 131, 321, 160, 388, 138, 340, 179, 321, 160, 260, 171, 340, 179, 274, 196, 260, 171, 227, 197, 274, 196, 254, 206, 227, 197, 227, 247, 254, 206, 254, 238, 227, 247, 265, 276, 254, 238, 288, 253, 265, 276, 312, 292, 288, 253, 328, 265, 312, 292, 347, 305, 328, 265, 378, 284, 347, 305, 359, 333, 378, 284, 388, 330, 359, 333, 360, 359, 388, 330, 385, 374, 360, 359, 345, 365, 385, 374, 360, 390, 345, 365, 259, 361, 360, 390, 262, 390, 259, 361, 166, 361, 262, 390, 169, 390, 166, 361, 78, 356, 169, 390, 81, 385, 78, 356, 51, 348, 81, 385, 38, 375, 51, 348, 33, 325, 38, 375, 8, 342, 33, 325, 31, 301, 8, 342, 2, 304, 31, 301, 40, 276, 2, 304, 9, 258, 40, 276, 71, 261, 9, 258, 62, 234, 71, 261, 133, 263, 62, 234, 124, 236, 133, 263, 178, 252, 124, 236, 161, 231, 178, 252, 198, 222, 161, 231, 165, 207, 198, 222, 194, 175, 165, 207, 163, 193, 194, 175, 155, 161, 163, 193, 140, 186, 155, 161, 83, 160, 140, 186, 80, 189, 83, 160, 51, 154, 80, 189, 30, 175, 51, 154, 39, 132, 30, 175, 10, 137, 39, 132, 40, 84, 10, 137, 11, 79, 40, 84, 66, 55, 11, 79, 51, 36, 66, 55, 119, 41, 51, 36, 118, 22 
  
];
let track2Check = [
202, 36, 202, 12, 279, 39, 288, 16, 341, 50, 358, 27, 360, 64, 385, 49, 368, 93, 396, 93, 361, 131, 388, 138, 321, 160, 340, 179, 260, 171, 274, 196, 227, 197, 254, 206, 227, 247, 254, 238, 265, 276, 288, 253, 312, 292, 328, 265, 347, 305, 378, 284, 359, 333, 388, 330, 360, 359, 385, 374, 345, 365, 360, 390, 259, 361, 262, 390, 166, 361, 169, 390, 78, 356, 81, 385, 51, 348, 38, 375, 33, 325, 8, 342, 31, 301, 2, 304, 40, 276, 9, 258, 71, 261, 62, 234, 133, 263, 124, 236, 178, 252, 161, 231, 198, 222, 165, 207, 194, 175, 163, 193, 155, 161, 140, 186, 83, 160, 80, 189, 51, 154, 30, 175, 39, 132, 10, 137, 40, 84, 11, 79, 66, 55, 51, 36, 119, 41, 118, 22   
];


let track3LocX = 69;
let track3LocY = 114;
let track3Rot = 4.45;
let track3Walls = [
82, 110, 78, 79, 55, 117, 47, 74, 78, 79, 104, 50, 47, 74, 85, 23, 104, 50, 163, 45, 85, 23, 163, 13, 163, 45, 230, 52, 163, 13, 235, 21, 230, 52, 277, 88, 235, 21, 300, 65, 277, 88, 282, 134, 300, 65, 313, 131, 282, 134, 302, 169, 313, 131, 321, 142, 302, 169, 327, 173, 321, 142, 354, 157, 327, 173, 330, 216, 354, 157, 361, 227, 330, 216, 330, 258, 361, 227, 355, 273, 330, 258, 315, 265, 355, 273, 322, 294, 315, 265, 286, 278, 322, 294, 309, 297, 286, 278, 284, 342, 309, 297, 312, 342, 284, 342, 286, 360, 312, 342, 309, 377, 286, 360, 274, 366, 309, 377, 283, 391, 274, 366, 257, 363, 283, 391, 248, 388, 257, 363, 247, 349, 248, 388, 224, 356, 247, 349, 242, 301, 224, 356, 219, 304, 242, 301, 234, 274, 219, 304, 213, 291, 234, 274, 201, 255, 213, 291, 196, 288, 201, 255, 168, 265, 196, 288, 181, 296, 168, 265, 151, 317, 181, 296, 177, 317, 151, 317, 153, 355, 177, 317, 178, 362, 153, 355, 140, 368, 178, 362, 153, 391, 140, 368, 119, 367, 153, 391, 119, 393, 119, 367, 109, 350, 119, 393, 84, 367, 109, 350, 108, 311, 84, 367, 78, 311, 108, 311, 96, 232, 78, 311, 67, 227, 96, 232, 101, 219, 67, 227, 84, 194, 101, 219, 135, 217, 84, 194, 132, 192, 135, 217, 202, 202, 132, 192, 175, 183, 202, 202, 214, 164, 175, 183, 183, 161, 214, 164, 208, 126, 183, 161, 179, 139, 208, 126, 172, 98, 179, 139, 161, 129, 172, 98, 114, 113, 161, 129, 125, 136, 114, 113, 95, 124, 125, 136, 92, 149, 95, 124, 84, 116, 92, 149, 63, 131, 84, 116, 82, 110, 63, 131, 55, 117 
];
let track3Check = [
  78, 79, 47, 74, 104, 50, 85, 23, 163, 45, 163, 13, 230, 52, 235, 21, 277, 88, 300, 65, 282, 134, 313, 131, 302, 169, 321, 142, 327, 173, 354, 157, 330, 216, 361, 227, 330, 258, 355, 273, 315, 265, 322, 294, 286, 278, 309, 297, 284, 342, 312, 342, 286, 360, 309, 377, 274, 366, 283, 391, 257, 363, 248, 388, 247, 349, 224, 356, 242, 301, 219, 304, 234, 274, 213, 291, 201, 267, 196, 288, 168, 277, 181, 296, 151, 317, 177, 317, 153, 355, 178, 362, 140, 368, 153, 391, 119, 367, 119, 393, 109, 350, 84, 367, 108, 311, 78, 311, 96, 232, 67, 227, 101, 219, 84, 194, 135, 217, 132, 192, 202, 202, 175, 183, 214, 164, 183, 161, 208, 126, 179, 139, 172, 98, 161, 129, 114, 113, 125, 136, 95, 124, 92, 149, 84, 116, 63, 131, 82, 110, 55, 117 
];


function genPresets(){
  
  presetTracks.push(new Track(createVector(track1LocX,track1LocY), track1Rot, track1Walls, track1Check));
  presetTracks.push(new Track(createVector(track2LocX,track2LocY), track2Rot, track2Walls, track2Check));
  presetTracks.push(new Track(createVector(track3LocX,track3LocY), track3Rot, track3Walls, track3Check));
  
}